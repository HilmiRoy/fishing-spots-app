{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20228\\\\OneDrive\\\\Desktop\\\\New\\\\fishing-spots-app\\\\frontend\\\\src\\\\contexts\\\\GoogleMapsProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { useJsApiLoader } from '@react-google-maps/api';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleMapsContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the context\nexport const useGoogleMaps = () => {\n  _s();\n  const context = useContext(GoogleMapsContext);\n  if (!context) {\n    throw new Error('useGoogleMaps must be used within a GoogleMapsProvider');\n  }\n  return context;\n};\n\n// Provider component\n_s(useGoogleMaps, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GoogleMapsProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyAgtx6yT4yO1KxGO1qRIDAbi2saRZYjwJ8\",\n    libraries: ['places', 'geometry'] // Include ALL libraries you need\n  });\n  if (loadError) {\n    console.error('Google Maps failed to load:', loadError);\n  }\n  return /*#__PURE__*/_jsxDEV(GoogleMapsContext.Provider, {\n    value: {\n      isLoaded,\n      loadError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s2(GoogleMapsProvider, \"ssip+Uy9VcsolHUNjpn9QiG6XKw=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = GoogleMapsProvider;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useJsApiLoader","jsxDEV","_jsxDEV","GoogleMapsContext","useGoogleMaps","_s","context","Error","GoogleMapsProvider","children","_s2","isLoaded","loadError","googleMapsApiKey","libraries","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/20228/OneDrive/Desktop/New/fishing-spots-app/frontend/src/contexts/GoogleMapsProvider.js"],"sourcesContent":["import React, { createContext, useContext } from 'react';\r\nimport { useJsApiLoader } from '@react-google-maps/api';\r\n\r\n// Create context\r\nconst GoogleMapsContext = createContext();\r\n\r\n// Custom hook to use the context\r\nexport const useGoogleMaps = () => {\r\n  const context = useContext(GoogleMapsContext);\r\n  if (!context) {\r\n    throw new Error('useGoogleMaps must be used within a GoogleMapsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Provider component\r\nexport const GoogleMapsProvider = ({ children }) => {\r\n  const { isLoaded, loadError } = useJsApiLoader({\r\n    googleMapsApiKey: \"AIzaSyAgtx6yT4yO1KxGO1qRIDAbi2saRZYjwJ8\",\r\n    libraries: ['places', 'geometry'] // Include ALL libraries you need\r\n  });\r\n\r\n  if (loadError) {\r\n    console.error('Google Maps failed to load:', loadError);\r\n  }\r\n\r\n  return (\r\n    <GoogleMapsContext.Provider value={{ isLoaded, loadError }}>\r\n      {children}\r\n    </GoogleMapsContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,SAASC,cAAc,QAAQ,wBAAwB;;AAEvD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,gBAAGL,aAAa,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMM,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,OAAO,GAAGP,UAAU,CAACI,iBAAiB,CAAC;EAC7C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EACA,OAAOD,OAAO;AAChB,CAAC;;AAED;AAAAD,EAAA,CARaD,aAAa;AAS1B,OAAO,MAAMI,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAClD,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGZ,cAAc,CAAC;IAC7Ca,gBAAgB,EAAE,yCAAyC;IAC3DC,SAAS,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;EACpC,CAAC,CAAC;EAEF,IAAIF,SAAS,EAAE;IACbG,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEJ,SAAS,CAAC;EACzD;EAEA,oBACEV,OAAA,CAACC,iBAAiB,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEP,QAAQ;MAAEC;IAAU,CAAE;IAAAH,QAAA,EACxDA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAACZ,GAAA,CAfWF,kBAAkB;EAAA,QACGR,cAAc;AAAA;AAAAuB,EAAA,GADnCf,kBAAkB;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}