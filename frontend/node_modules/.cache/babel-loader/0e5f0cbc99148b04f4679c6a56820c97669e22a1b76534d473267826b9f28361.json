{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20228\\\\OneDrive\\\\Desktop\\\\New\\\\fishing-spots-app\\\\frontend\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { db } from '../firebase';\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\nconst defaultCenter = {\n  lat: 3.139,\n  // Kuala Lumpur\n  lng: 101.6869\n};\nfunction getDistance(lat1, lng1, lat2, lng2) {\n  // Haversine formula\n  const toRad = x => x * Math.PI / 180;\n  const R = 6371; // km\n  const dLat = toRad(lat2 - lat1);\n  const dLng = toRad(lng2 - lng1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\nconst MapView = () => {\n  _s();\n  const [spots, setSpots] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyAgtx6yT4yO1KxGO1qRIDAbi2saRZYjwJ8\"\n  });\n  useEffect(() => {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => setUserLocation(defaultCenter) // fallback\n      );\n    } else {\n      setUserLocation(defaultCenter);\n    }\n  }, []);\n  useEffect(() => {\n    const fetchSpots = async () => {\n      const querySnapshot = await getDocs(collection(db, \"fishingSpots\"));\n      const spotsData = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setSpots(spotsData.filter(spot => spot.approved));\n    };\n    fetchSpots();\n  }, []);\n\n  // Filter spots within 20km (you can adjust this)\n  const nearbySpots = userLocation ? spots.filter(spot => getDistance(userLocation.lat, userLocation.lng, spot.location.lat, spot.location.lng) <= 20) : spots;\n  if (!isLoaded || !userLocation) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Map...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 42\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: userLocation,\n    zoom: 12,\n    children: [/*#__PURE__*/_jsxDEV(Marker, {\n      position: userLocation,\n      label: \"You\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), nearbySpots.map(spot => /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: spot.location.lat,\n        lng: spot.location.lng\n      },\n      title: spot.title || spot.name\n    }, spot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"aQH0BBTr2xIDjZ304+WmZGMJt6Y=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","db","collection","getDocs","GoogleMap","Marker","useJsApiLoader","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","getDistance","lat1","lng1","lat2","lng2","toRad","x","Math","PI","R","dLat","dLng","a","sin","cos","c","atan2","sqrt","MapView","_s","spots","setSpots","userLocation","setUserLocation","isLoaded","googleMapsApiKey","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetchSpots","querySnapshot","spotsData","docs","map","doc","id","data","filter","spot","approved","nearbySpots","location","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","center","zoom","label","title","name","_c","$RefreshReg$"],"sources":["C:/Users/20228/OneDrive/Desktop/New/fishing-spots-app/frontend/src/components/MapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { db } from '../firebase';\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\nconst defaultCenter = {\n  lat: 3.139, // Kuala Lumpur\n  lng: 101.6869\n};\n\nfunction getDistance(lat1, lng1, lat2, lng2) {\n  // Haversine formula\n  const toRad = x => x * Math.PI / 180;\n  const R = 6371; // km\n  const dLat = toRad(lat2 - lat1);\n  const dLng = toRad(lng2 - lng1);\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n            Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nconst MapView = () => {\n  const [spots, setSpots] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const { isLoaded } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyAgtx6yT4yO1KxGO1qRIDAbi2saRZYjwJ8\"\n  });\n\n  useEffect(() => {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n        },\n        () => setUserLocation(defaultCenter) // fallback\n      );\n    } else {\n      setUserLocation(defaultCenter);\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchSpots = async () => {\n      const querySnapshot = await getDocs(collection(db, \"fishingSpots\"));\n      const spotsData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      setSpots(spotsData.filter(spot => spot.approved));\n    };\n    fetchSpots();\n  }, []);\n\n  // Filter spots within 20km (you can adjust this)\n  const nearbySpots = userLocation\n    ? spots.filter(spot =>\n        getDistance(\n          userLocation.lat,\n          userLocation.lng,\n          spot.location.lat,\n          spot.location.lng\n        ) <= 20\n      )\n    : spots;\n\n  if (!isLoaded || !userLocation) return <div>Loading Map...</div>;\n\n  return (\n    <GoogleMap mapContainerStyle={containerStyle} center={userLocation} zoom={12}>\n      {/* User marker */}\n      <Marker position={userLocation} label=\"You\" />\n      {/* Nearby fishing spots */}\n      {nearbySpots.map(spot => (\n        <Marker\n          key={spot.id}\n          position={{ lat: spot.location.lat, lng: spot.location.lng }}\n          title={spot.title || spot.name}\n        />\n      ))}\n    </GoogleMap>\n  );\n};\n\nexport default MapView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}