{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20228\\\\OneDrive\\\\Desktop\\\\New\\\\fishing-spots-app\\\\frontend\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { db } from '../firebase';\nimport { collection, getDocs } from \"firebase/firestore\";\n\n// For Google Maps, use a library like @react-google-maps/api\nimport { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\nconst center = {\n  lat: 3.139,\n  // Example: Kuala Lumpur\n  lng: 101.6869\n};\nconst MapView = () => {\n  _s();\n  const [spots, setSpots] = useState([]);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyAgtx6yT4yO1KxGO1qRIDAbi2saRZYjwJ8\"\n  });\n  useEffect(() => {\n    const fetchSpots = async () => {\n      const querySnapshot = await getDocs(collection(db, \"fishingSpots\"));\n      const spotsData = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setSpots(spotsData.filter(spot => spot.approved));\n    };\n    fetchSpots();\n  }, []);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Map...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 8,\n    children: spots.map(spot => /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: spot.location.lat,\n        lng: spot.location.lng\n      },\n      title: spot.title || spot.name\n    }, spot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"v90OTReIMjAcp7KlkiJo0oUa0xE=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","db","collection","getDocs","GoogleMap","Marker","useJsApiLoader","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MapView","_s","spots","setSpots","isLoaded","googleMapsApiKey","fetchSpots","querySnapshot","spotsData","docs","map","doc","id","data","filter","spot","approved","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","position","location","title","name","_c","$RefreshReg$"],"sources":["C:/Users/20228/OneDrive/Desktop/New/fishing-spots-app/frontend/src/components/MapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { db } from '../firebase';\nimport { collection, getDocs } from \"firebase/firestore\";\n\n// For Google Maps, use a library like @react-google-maps/api\nimport { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\nconst center = {\n  lat: 3.139, // Example: Kuala Lumpur\n  lng: 101.6869\n};\n\nconst MapView = () => {\n  const [spots, setSpots] = useState([]);\n  const { isLoaded } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyAgtx6yT4yO1KxGO1qRIDAbi2saRZYjwJ8\"\n  });\n\n  useEffect(() => {\n    const fetchSpots = async () => {\n      const querySnapshot = await getDocs(collection(db, \"fishingSpots\"));\n      const spotsData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      setSpots(spotsData.filter(spot => spot.approved));\n    };\n    fetchSpots();\n  }, []);\n\n  if (!isLoaded) return <div>Loading Map...</div>;\n\n  return (\n    <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={8}>\n      {spots.map(spot => (\n        <Marker\n          key={spot.id}\n          position={{ lat: spot.location.lat, lng: spot.location.lng }}\n          title={spot.title || spot.name}\n        />\n      ))}\n    </GoogleMap>\n  );\n};\n\nexport default MapView;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,aAAa;AAChC,SAASC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;;AAExD;AACA,SAASC,SAAS,EAAEC,MAAM,EAAEC,cAAc,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,MAAM,GAAG;EACbC,GAAG,EAAE,KAAK;EAAE;EACZC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAEmB;EAAS,CAAC,GAAGb,cAAc,CAAC;IAClCc,gBAAgB,EAAE;EACpB,CAAC,CAAC;EAEFrB,SAAS,CAAC,MAAM;IACd,MAAMsB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,aAAa,GAAG,MAAMnB,OAAO,CAACD,UAAU,CAACD,EAAE,EAAE,cAAc,CAAC,CAAC;MACnE,MAAMsB,SAAS,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;QAAEC,EAAE,EAAED,GAAG,CAACC,EAAE;QAAE,GAAGD,GAAG,CAACE,IAAI,CAAC;MAAE,CAAC,CAAC,CAAC;MAChFV,QAAQ,CAACK,SAAS,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,CAAC;IACnD,CAAC;IACDV,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,QAAQ,EAAE,oBAAOX,OAAA;IAAAwB,QAAA,EAAK;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE/C,oBACE5B,OAAA,CAACJ,SAAS;IAACiC,iBAAiB,EAAE5B,cAAe;IAACG,MAAM,EAAEA,MAAO;IAAC0B,IAAI,EAAE,CAAE;IAAAN,QAAA,EACnEf,KAAK,CAACQ,GAAG,CAACK,IAAI,iBACbtB,OAAA,CAACH,MAAM;MAELkC,QAAQ,EAAE;QAAE1B,GAAG,EAAEiB,IAAI,CAACU,QAAQ,CAAC3B,GAAG;QAAEC,GAAG,EAAEgB,IAAI,CAACU,QAAQ,CAAC1B;MAAI,CAAE;MAC7D2B,KAAK,EAAEX,IAAI,CAACW,KAAK,IAAIX,IAAI,CAACY;IAAK,GAF1BZ,IAAI,CAACH,EAAE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGb,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEhB,CAAC;AAACpB,EAAA,CA5BID,OAAO;EAAA,QAEUT,cAAc;AAAA;AAAAqC,EAAA,GAF/B5B,OAAO;AA8Bb,eAAeA,OAAO;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}